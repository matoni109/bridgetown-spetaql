schema {
  query: Query
  mutation: Mutation
}

"""Input for authenticating an access token."""
input AccessTokenAuthenticateInput {
  """An access token."""
  token: String!
}

"""Input for creating a channel."""
input ChannelCreateInput {
  """The channel type."""
  channelType: ChannelType!
  """The channel's external ID."""
  externalId: String!
  """The channel's identifier"""
  identifier: String!
}


"""An access token."""
type AccessToken {
  """Access token."""
  token: String!
  """The type of access token (eg. organisation)."""
  tokenType: AccessTokenType!
}

"""Type of access token."""
enum AccessTokenType {
  """Token linked to channel"""
  CHANNEL
  """Token linked to customer"""
  CUSTOMER
  """Token linked to organisation"""
  ORGANISATION
}

"""Specifies the input fields required to retry payment for a campaign order group."""
input CampaignOrderGroupRetryPaymentInput {
  """ID of the campaign order group to retry paying."""
  id: GlobalId!
}

"""A global id."""
scalar GlobalId

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Represents untyped JSON"""
scalar JSON

"""Autogenerated return type of AccessTokenAuthenticate"""
type AccessTokenAuthenticatePayload {
  """The newly created ID token."""
  idToken: IdToken
  """A list of user errors."""
  userErrors: [UserError!]!
}

"""The root query type."""
type Query {
  """Find a channel by ID."""
  channel(
    """The channel's ID."""
    id: GlobalId!
  ): Channel
    """Find a customer by ID."""
  customer(
    """The customer's ID."""
    id: GlobalId!
  ): Customer
}
"""The root mutation type."""
type Mutation {
  """Authenticates an access token."""
  accessTokenAuthenticate(
    """Input for authenticating an access token."""
    input: AccessTokenAuthenticateInput!
  ): AccessTokenAuthenticatePayload
  """Create a a new channel."""
  channelCreate(
    """Input for creating a channel."""
    input: ChannelCreateInput!
  ): ChannelCreatePayload
}

"""An id token."""
type IdToken {
  """An array of the access token's scopes."""
  scopes: [String!]!
  """Access token."""
  token: String!
  """The type of access token (eg. organisation)."""
  tokenType: AccessTokenType!
}

"""A user-readable error."""
type UserError {
  """The path to the input field that caused the error."""
  field: [String!]!
  """The error message."""
  message: String!
}

"""A customer."""
type Customer {
  """The customer's channel."""
  channel: Channel!
  """The customer's email"""
  email: String!
  """The customer's external ID."""
  externalId: String!
  """The customer's first name."""
  firstName: String!
  """The customer's ID."""
  id: GlobalId!
  """The customer's last name."""
  lastName: String!
  """The customer's status."""
  status: CustomerStatus!
}

"""Autogenerated return type of ChannelCreate"""
type ChannelCreatePayload {
  """The newly created channel."""
  channel: Channel
  """A list of user errors."""
  userErrors: [UserError!]!
}

type Channel {
  """The type of sales channel (eg. Shopify)."""
  channelType: ChannelType!
  """The time the channel was created"""
  createdAt: ISO8601DateTime!
  """The channel's external ID."""
  externalId: ID!
  """The channel's ID."""
  id: GlobalId!
  """The channel's identifier"""
  identifier: String!
  """The channel's owner."""
  sharedSecret: String!
  """The channel's status (eg. active)."""
  status: ChannelStatus!
  """The time the channel was last updated"""
  updatedAt: ISO8601DateTime!
}

"""Type of channel eg: (Shopify)"""
enum ChannelType {
  """A Shopify channel"""
  SHOPIFY
}


"""The possible channel statuses."""
enum ChannelStatus {
  """The channel is active."""
  ACTIVE
  """The channel is inactive."""
  INACTIVE
}


"""The possible customer statuses."""
enum CustomerStatus {
  """The customer is active."""
  ACTIVE
  """The customer is deleted."""
  DELETED
  """The customer is inactive"""
  INACTIVE
}
